// Code generated by protoc-gen-go.
// source: github.com/appcelerator/amp/api/rpc/cluster/cluster.proto
// DO NOT EDIT!

/*
Package cluster is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/api/rpc/cluster/cluster.proto

It has these top-level messages:
	CreateRequest
	CreateReply
	ListRequest
	ListReply
	StatusRequest
	StatusReply
	UpdateRequest
	UpdateReply
	RemoveRequest
	RemoveReply
	NodeListRequest
	NodeListReply
	NodeReply
*/
package cluster

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import clusters "github.com/appcelerator/amp/data/clusters"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateRequest struct {
	Name             string                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Provider         clusters.CloudProvider `protobuf:"varint,2,opt,name=provider,enum=clusters.CloudProvider" json:"provider,omitempty"`
	OrganizationName string                 `protobuf:"bytes,3,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	KeypairName      string                 `protobuf:"bytes,4,opt,name=keypair_name,json=keypairName" json:"keypair_name,omitempty"`
	VolumeSize       int64                  `protobuf:"varint,5,opt,name=volume_size,json=volumeSize" json:"volume_size,omitempty"`
	ManagerCount     int64                  `protobuf:"varint,6,opt,name=manager_count,json=managerCount" json:"manager_count,omitempty"`
	WorkerCount      int64                  `protobuf:"varint,7,opt,name=worker_count,json=workerCount" json:"worker_count,omitempty"`
	RegistryMirror   []string               `protobuf:"bytes,8,rep,name=registry_mirror,json=registryMirror" json:"registry_mirror,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateRequest) GetProvider() clusters.CloudProvider {
	if m != nil {
		return m.Provider
	}
	return clusters.CloudProvider_ANY
}

func (m *CreateRequest) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *CreateRequest) GetKeypairName() string {
	if m != nil {
		return m.KeypairName
	}
	return ""
}

func (m *CreateRequest) GetVolumeSize() int64 {
	if m != nil {
		return m.VolumeSize
	}
	return 0
}

func (m *CreateRequest) GetManagerCount() int64 {
	if m != nil {
		return m.ManagerCount
	}
	return 0
}

func (m *CreateRequest) GetWorkerCount() int64 {
	if m != nil {
		return m.WorkerCount
	}
	return 0
}

func (m *CreateRequest) GetRegistryMirror() []string {
	if m != nil {
		return m.RegistryMirror
	}
	return nil
}

type CreateReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateReply) Reset()                    { *m = CreateReply{} }
func (m *CreateReply) String() string            { return proto.CompactTextString(m) }
func (*CreateReply) ProtoMessage()               {}
func (*CreateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ListReply struct {
}

func (m *ListReply) Reset()                    { *m = ListReply{} }
func (m *ListReply) String() string            { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()               {}
func (*ListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type StatusRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StatusRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type StatusReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StatusReply) Reset()                    { *m = StatusReply{} }
func (m *StatusReply) String() string            { return proto.CompactTextString(m) }
func (*StatusReply) ProtoMessage()               {}
func (*StatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StatusReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdateRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdateReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *UpdateReply) Reset()                    { *m = UpdateReply{} }
func (m *UpdateReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateReply) ProtoMessage()               {}
func (*UpdateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RemoveRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RemoveRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type RemoveReply struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RemoveReply) Reset()                    { *m = RemoveReply{} }
func (m *RemoveReply) String() string            { return proto.CompactTextString(m) }
func (*RemoveReply) ProtoMessage()               {}
func (*RemoveReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RemoveReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type NodeListRequest struct {
}

func (m *NodeListRequest) Reset()                    { *m = NodeListRequest{} }
func (m *NodeListRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeListRequest) ProtoMessage()               {}
func (*NodeListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type NodeListReply struct {
	Nodes []*NodeReply `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *NodeListReply) Reset()                    { *m = NodeListReply{} }
func (m *NodeListReply) String() string            { return proto.CompactTextString(m) }
func (*NodeListReply) ProtoMessage()               {}
func (*NodeListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *NodeListReply) GetNodes() []*NodeReply {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodeReply struct {
	Id            string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Hostname      string            `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
	Status        string            `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Availability  string            `protobuf:"bytes,4,opt,name=availability" json:"availability,omitempty"`
	Role          string            `protobuf:"bytes,5,opt,name=role" json:"role,omitempty"`
	ManagerLeader bool              `protobuf:"varint,6,opt,name=manager_leader,json=managerLeader" json:"manager_leader,omitempty"`
	DockerVersion string            `protobuf:"bytes,7,opt,name=docker_version,json=dockerVersion" json:"docker_version,omitempty"`
	KeypairName   string            `protobuf:"bytes,8,opt,name=keypair_name,json=keypairName" json:"keypair_name,omitempty"`
	EngineLabels  map[string]string `protobuf:"bytes,9,rep,name=engine_labels,json=engineLabels" json:"engine_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NodeLabels    map[string]string `protobuf:"bytes,10,rep,name=node_labels,json=nodeLabels" json:"node_labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NodeReply) Reset()                    { *m = NodeReply{} }
func (m *NodeReply) String() string            { return proto.CompactTextString(m) }
func (*NodeReply) ProtoMessage()               {}
func (*NodeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *NodeReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeReply) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NodeReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *NodeReply) GetAvailability() string {
	if m != nil {
		return m.Availability
	}
	return ""
}

func (m *NodeReply) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *NodeReply) GetManagerLeader() bool {
	if m != nil {
		return m.ManagerLeader
	}
	return false
}

func (m *NodeReply) GetDockerVersion() string {
	if m != nil {
		return m.DockerVersion
	}
	return ""
}

func (m *NodeReply) GetKeypairName() string {
	if m != nil {
		return m.KeypairName
	}
	return ""
}

func (m *NodeReply) GetEngineLabels() map[string]string {
	if m != nil {
		return m.EngineLabels
	}
	return nil
}

func (m *NodeReply) GetNodeLabels() map[string]string {
	if m != nil {
		return m.NodeLabels
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateRequest)(nil), "cluster.CreateRequest")
	proto.RegisterType((*CreateReply)(nil), "cluster.CreateReply")
	proto.RegisterType((*ListRequest)(nil), "cluster.ListRequest")
	proto.RegisterType((*ListReply)(nil), "cluster.ListReply")
	proto.RegisterType((*StatusRequest)(nil), "cluster.StatusRequest")
	proto.RegisterType((*StatusReply)(nil), "cluster.StatusReply")
	proto.RegisterType((*UpdateRequest)(nil), "cluster.UpdateRequest")
	proto.RegisterType((*UpdateReply)(nil), "cluster.UpdateReply")
	proto.RegisterType((*RemoveRequest)(nil), "cluster.RemoveRequest")
	proto.RegisterType((*RemoveReply)(nil), "cluster.RemoveReply")
	proto.RegisterType((*NodeListRequest)(nil), "cluster.NodeListRequest")
	proto.RegisterType((*NodeListReply)(nil), "cluster.NodeListReply")
	proto.RegisterType((*NodeReply)(nil), "cluster.NodeReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cluster service

type ClusterClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error)
	NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*NodeListReply, error)
}

type clusterClient struct {
	cc *grpc.ClientConn
}

func NewClusterClient(cc *grpc.ClientConn) ClusterClient {
	return &clusterClient{cc}
}

func (c *clusterClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := grpc.Invoke(ctx, "/cluster.Cluster/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/cluster.Cluster/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := grpc.Invoke(ctx, "/cluster.Cluster/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateReply, error) {
	out := new(UpdateReply)
	err := grpc.Invoke(ctx, "/cluster.Cluster/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveReply, error) {
	out := new(RemoveReply)
	err := grpc.Invoke(ctx, "/cluster.Cluster/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterClient) NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*NodeListReply, error) {
	out := new(NodeListReply)
	err := grpc.Invoke(ctx, "/cluster.Cluster/NodeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cluster service

type ClusterServer interface {
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
	Status(context.Context, *StatusRequest) (*StatusReply, error)
	Update(context.Context, *UpdateRequest) (*UpdateReply, error)
	Remove(context.Context, *RemoveRequest) (*RemoveReply, error)
	NodeList(context.Context, *NodeListRequest) (*NodeListReply, error)
}

func RegisterClusterServer(s *grpc.Server, srv ClusterServer) {
	s.RegisterService(&_Cluster_serviceDesc, srv)
}

func _Cluster_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cluster_NodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServer).NodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Cluster/NodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServer).NodeList(ctx, req.(*NodeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cluster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.Cluster",
	HandlerType: (*ClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Cluster_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Cluster_List_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Cluster_Status_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Cluster_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Cluster_Remove_Handler,
		},
		{
			MethodName: "NodeList",
			Handler:    _Cluster_NodeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/appcelerator/amp/api/rpc/cluster/cluster.proto",
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/api/rpc/cluster/cluster.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 703 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x6a, 0x1b, 0x39,
	0x18, 0xc5, 0x3f, 0x71, 0xec, 0x6f, 0x3c, 0x4e, 0x22, 0x42, 0x76, 0x30, 0x84, 0x78, 0x67, 0x77,
	0x59, 0x43, 0xc1, 0x2e, 0x09, 0x98, 0xa4, 0xb4, 0xf4, 0xc2, 0xe4, 0xa2, 0x90, 0x86, 0x32, 0xa1,
	0xbd, 0x35, 0xb2, 0x47, 0x38, 0x22, 0xf2, 0x68, 0xaa, 0xd1, 0xb8, 0x4c, 0x9e, 0xa0, 0xcf, 0xd4,
	0x37, 0xe9, 0xdb, 0x14, 0x49, 0xa3, 0x89, 0x1c, 0xbb, 0xb9, 0xe8, 0x95, 0xa5, 0xa3, 0x73, 0xbe,
	0xcf, 0xfa, 0x74, 0xce, 0xc0, 0xd5, 0x92, 0xca, 0xfb, 0x7c, 0x3e, 0x5a, 0xf0, 0xd5, 0x18, 0xa7,
	0xe9, 0x82, 0x30, 0x22, 0xb0, 0xe4, 0x62, 0x8c, 0x57, 0xe9, 0x18, 0xa7, 0x74, 0x2c, 0xd2, 0xc5,
	0x78, 0xc1, 0xf2, 0x4c, 0x12, 0x61, 0x7f, 0x47, 0xa9, 0xe0, 0x92, 0xa3, 0xfd, 0x72, 0xdb, 0xbf,
	0x7c, 0xa9, 0x46, 0x8c, 0x25, 0xb6, 0xc2, 0xac, 0x5a, 0x98, 0x12, 0xe1, 0x8f, 0x3a, 0xf8, 0x53,
	0x41, 0xb0, 0x24, 0x11, 0xf9, 0x9a, 0x93, 0x4c, 0x22, 0x04, 0xcd, 0x04, 0xaf, 0x48, 0x50, 0x1b,
	0xd4, 0x86, 0x9d, 0x48, 0xaf, 0xd1, 0x05, 0xb4, 0x53, 0xc1, 0xd7, 0x34, 0x26, 0x22, 0xa8, 0x0f,
	0x6a, 0xc3, 0xde, 0xf9, 0x5f, 0xa3, 0xaa, 0xd0, 0x94, 0xf1, 0x3c, 0xfe, 0x54, 0x1e, 0x47, 0x15,
	0x11, 0xbd, 0x82, 0x23, 0x2e, 0x96, 0x38, 0xa1, 0x8f, 0x58, 0x52, 0x9e, 0xcc, 0x74, 0xd5, 0x86,
	0xae, 0x7a, 0xe8, 0x1e, 0xdc, 0xaa, 0x0e, 0x7f, 0x43, 0xf7, 0x81, 0x14, 0x29, 0xa6, 0xc2, 0xf0,
	0x9a, 0x9a, 0xe7, 0x95, 0x98, 0xa6, 0x9c, 0x81, 0xb7, 0xe6, 0x2c, 0x5f, 0x91, 0x59, 0x46, 0x1f,
	0x49, 0xb0, 0x37, 0xa8, 0x0d, 0x1b, 0x11, 0x18, 0xe8, 0x8e, 0x3e, 0x12, 0xf4, 0x0f, 0xf8, 0x2b,
	0x9c, 0xe0, 0x25, 0x11, 0xb3, 0x05, 0xcf, 0x13, 0x19, 0xb4, 0x34, 0xa5, 0x5b, 0x82, 0x53, 0x85,
	0xa9, 0x46, 0xdf, 0xb8, 0x78, 0xa8, 0x38, 0xfb, 0x9a, 0xe3, 0x19, 0xcc, 0x50, 0xfe, 0x87, 0x03,
	0x41, 0x96, 0x34, 0x93, 0xa2, 0x98, 0xad, 0xa8, 0x10, 0x5c, 0x04, 0xed, 0x41, 0x63, 0xd8, 0x89,
	0x7a, 0x16, 0xfe, 0xa8, 0xd1, 0xf0, 0x14, 0x3c, 0x3b, 0xbb, 0x94, 0x15, 0xa8, 0x07, 0x75, 0x1a,
	0x97, 0x73, 0xab, 0xd3, 0x38, 0xf4, 0xc1, 0xbb, 0xa1, 0x99, 0x2c, 0x07, 0x1b, 0x7a, 0xd0, 0x31,
	0xdb, 0x94, 0x15, 0xe1, 0x19, 0xf8, 0x77, 0x12, 0xcb, 0x3c, 0xb3, 0x63, 0x7f, 0x2e, 0x3e, 0x05,
	0xcf, 0x12, 0x76, 0xd5, 0x3e, 0x03, 0xff, 0x73, 0x1a, 0x3b, 0xcf, 0xb6, 0x43, 0x6f, 0x09, 0xbf,
	0xd1, 0x47, 0x64, 0xc5, 0xd7, 0x2f, 0xe9, 0x2d, 0x61, 0x97, 0xfe, 0x08, 0x0e, 0x6e, 0x79, 0x4c,
	0xdc, 0xfb, 0x5d, 0x81, 0xff, 0x04, 0x29, 0xcd, 0x10, 0xf6, 0x12, 0x1e, 0x93, 0x2c, 0xa8, 0x0d,
	0x1a, 0x43, 0xef, 0x1c, 0x59, 0xcb, 0x8c, 0x14, 0x4d, 0x53, 0x22, 0x43, 0x08, 0xbf, 0x37, 0xa1,
	0x53, 0x81, 0xcf, 0x7b, 0xa1, 0x3e, 0xb4, 0xef, 0x79, 0x26, 0xb5, 0x2f, 0xea, 0x1a, 0xad, 0xf6,
	0xe8, 0x04, 0x5a, 0x99, 0x1e, 0x53, 0xe9, 0xac, 0x72, 0x87, 0x42, 0xe8, 0xe2, 0x35, 0xa6, 0x0c,
	0xcf, 0x29, 0xa3, 0xb2, 0x28, 0xfd, 0xb4, 0x81, 0x29, 0xa7, 0x0b, 0xce, 0x8c, 0x93, 0x3a, 0x91,
	0x5e, 0xa3, 0xff, 0xa0, 0x67, 0x3d, 0xc4, 0x08, 0x56, 0x7e, 0x57, 0x26, 0x6a, 0x47, 0xd6, 0x59,
	0x37, 0x1a, 0x54, 0xb4, 0x98, 0x2f, 0x94, 0x8b, 0xd6, 0x44, 0x64, 0x94, 0x27, 0xda, 0x47, 0x9d,
	0xc8, 0x37, 0xe8, 0x17, 0x03, 0x6e, 0xb9, 0xba, 0xbd, 0xed, 0xea, 0x0f, 0xe0, 0x93, 0x64, 0x49,
	0x13, 0x32, 0x63, 0x78, 0x4e, 0x58, 0x16, 0x74, 0xf4, 0xb0, 0xfe, 0xdd, 0x1e, 0xd6, 0xe8, 0x5a,
	0xf3, 0x6e, 0x34, 0xed, 0x3a, 0x91, 0xa2, 0x88, 0xba, 0xc4, 0x81, 0xd0, 0x14, 0x3c, 0x35, 0x4e,
	0x5b, 0x08, 0x74, 0xa1, 0x70, 0x47, 0x21, 0xfd, 0x4c, 0x4e, 0x19, 0x48, 0x2a, 0xa0, 0xff, 0x1e,
	0x8e, 0xb6, 0xfa, 0xa0, 0x43, 0x68, 0x3c, 0x90, 0xa2, 0x7c, 0x12, 0xb5, 0x44, 0xc7, 0xb0, 0xb7,
	0xc6, 0x2c, 0xb7, 0x0f, 0x62, 0x36, 0x6f, 0xea, 0x97, 0xb5, 0xfe, 0xbb, 0xd2, 0x19, 0x7f, 0x26,
	0x3f, 0xff, 0x59, 0x87, 0xfd, 0xa9, 0xf9, 0xc7, 0x68, 0x02, 0x2d, 0x93, 0x2f, 0x74, 0x52, 0xdd,
	0x62, 0xe3, 0x63, 0xd5, 0x3f, 0xde, 0xc2, 0x95, 0x81, 0x5e, 0x43, 0x53, 0xb9, 0x10, 0x3d, 0x9d,
	0x3a, 0x3e, 0xed, 0xa3, 0x67, 0xa8, 0x52, 0x4c, 0xa0, 0x65, 0xd2, 0xe6, 0x74, 0xda, 0xc8, 0xa7,
	0xd3, 0xc9, 0x8d, 0xe5, 0x04, 0x5a, 0x26, 0x65, 0x8e, 0x6e, 0x23, 0x97, 0x8e, 0xce, 0x8d, 0xe3,
	0x04, 0x5a, 0x26, 0x5d, 0x8e, 0x6e, 0x23, 0x8f, 0x8e, 0xce, 0x8d, 0xe1, 0x5b, 0x68, 0xdb, 0x8c,
	0xa1, 0x60, 0xe3, 0x65, 0xdd, 0x1b, 0x9e, 0xec, 0x38, 0x49, 0x59, 0x31, 0x6f, 0xe9, 0x6f, 0xfe,
	0xc5, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xcf, 0x28, 0x34, 0x73, 0x06, 0x00, 0x00,
}
